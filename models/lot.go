package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Lot lot
// swagger:model lot
type Lot struct {

	// address
	// Min Length: 1
	Address string `json:"address,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// lot type
	// Min Length: 1
	LotType string `json:"lotType,omitempty"`

	// medium car size
	MediumCarSize int64 `json:"mediumCarSize,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// remainder medium car spaces
	RemainderMediumCarSpaces int64 `json:"remainderMediumCarSpaces,omitempty"`

	// remainder small car spaces
	RemainderSmallCarSpaces int64 `json:"remainderSmallCarSpaces,omitempty"`

	// small car size
	SmallCarSize int64 `json:"smallCarSize,omitempty"`
	
	SmallAvailableParkingSet map[int64]bool
	SmallOccupiedParkingSet map[int64]Ticket
	
	MediumAvailableParkingSet map[int64]bool
	MediumOccupiedParkingSet map[int64]Ticket
	
}

func (m *Lot) Init() {
	m.SmallAvailableParkingSet = make(map[int64]bool)
	m.SmallOccupiedParkingSet = make(map[int64]Ticket)
	
	m.MediumAvailableParkingSet = make(map[int64]bool)
	m.MediumOccupiedParkingSet = make(map[int64]Ticket)
	
	for i := 1; i <= int(m.SmallCarSize); i++ {
		m.SmallAvailableParkingSet[int64(i)] = true;
	}
	for i := 1; i <= int(m.MediumCarSize); i++ {
		m.MediumAvailableParkingSet[int64(i)] = true;
	}
}

func (m *Lot) GetTicket(ticket Ticket) {
	if (ticket.CarSize == "SMALL"){
		var i = int64(0)
		for key, value := range m.SmallAvailableParkingSet {
		    i = key
		    if value == true {
			    break;
		    }
		}
		ticket.SpotNumber = i
		m.SmallOccupiedParkingSet[int64(i)] = ticket
		delete(m.SmallAvailableParkingSet, int64(i))
	} else if (ticket.CarSize == "MEDIUM"){
		var i = int64(0)
		for key, value := range m.MediumAvailableParkingSet {
		    i = key
		    if value == true {
			    break;
		    }
		}
		ticket.SpotNumber = i
		m.MediumOccupiedParkingSet[int64(i)] = ticket
		delete(m.MediumAvailableParkingSet, int64(i))
	}
}

func (m *Lot) CarLeaves(carSize string, parkingNo int64) *Ticket {
	if (carSize == "SMALL"){
		var ticket = m.SmallOccupiedParkingSet[parkingNo]
		m.SmallAvailableParkingSet[parkingNo] = true
		delete(m.SmallOccupiedParkingSet, parkingNo)
		ticket.CalculateFair(m.LotType)
		return &ticket
	} else if (carSize == "MEDIUM"){
		var ticket = m.MediumOccupiedParkingSet[parkingNo]
		m.MediumAvailableParkingSet[parkingNo] = true
		delete(m.MediumOccupiedParkingSet, parkingNo)
		ticket.CalculateFair(m.LotType)
		return &ticket
	}
	return nil;
}

// Validate validates this lot
func (m *Lot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLotType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lot) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := validate.MinLength("address", "body", string(m.Address), 1); err != nil {
		return err
	}

	return nil
}

func (m *Lot) validateLotType(formats strfmt.Registry) error {

	if swag.IsZero(m.LotType) { // not required
		return nil
	}

	if err := validate.MinLength("lotType", "body", string(m.LotType), 1); err != nil {
		return err
	}

	return nil
}

func (m *Lot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}
