package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
    "time"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

const (
    // See http://golang.org/pkg/time/#Parse
    timeFormat = "2006-01-02 15:04 MST"
)

// Ticket ticket
// swagger:model ticket
type Ticket struct {

	// amount
	Amount float64 `json:"amount,omitempty"`

	// car size
	// Min Length: 1
	CarSize string `json:"carSize,omitempty"`

	// entry time
	EntryTime string `json:"entryTime,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// leave time
	LeaveTime string `json:"leaveTime,omitempty"`

	// license number
	// Min Length: 1
	LicenseNumber string `json:"licenseNumber,omitempty"`

	// lot Id
	LotID int64 `json:"lotId,omitempty"`

	// spot number
	SpotNumber int64 `json:"spotNumber,omitempty"`
}

// Validate validates this ticket
func (m *Ticket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLicenseNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ticket) validateCarSize(formats strfmt.Registry) error {

	if swag.IsZero(m.CarSize) { // not required
		return nil
	}

	if err := validate.MinLength("carSize", "body", string(m.CarSize), 1); err != nil {
		return err
	}

	return nil
}

func (m *Ticket) validateLicenseNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseNumber) { // not required
		return nil
	}

	if err := validate.MinLength("licenseNumber", "body", string(m.LicenseNumber), 1); err != nil {
		return err
	}

	return nil
}

func (m *Ticket) CalculateFair(lotType string) float64 {
	
	entry, err := time.Parse(timeFormat, m.EntryTime)
	exit, err := time.Parse(timeFormat, m.LeaveTime)
	duration1 := time.Since(entry)
	duration2 := time.Since(exit)
	var min = duration2.Minutes() - duration1.Minutes()
	var hours = (min / 60 + 1)
	var days = (hours / 24 + 1)
	if (err != nil){
		if(lotType == "EXPRESS"){
			m.Amount = 5 * hours
		} else if(lotType == "DAILY"){
			m.Amount = 50 * days
		} else if(lotType == "VALUE"){
			if(min <= 15 ){
				m.Amount = 0
			} else if (hours <= 5){
				if(m.CarSize == "SMALL") {
					m.Amount = 10 * hours
				} else if(m.CarSize == "MEDIUM"){
					m.Amount = 20 * hours
				}
				if(exit.Weekday() == 6){
					m.Amount = m.Amount/2
				}
			} else {
				if (entry.Hour() > 3){
					days = days + 1
				}
				m.Amount = 50 * days
				if(exit.Weekday() == 6){
					m.Amount = m.Amount - 25
				}
				if(exit.Weekday() == 0){
					m.Amount = m.Amount - 50
				}
			}
		}
	}
	
	return 0
}

